;(function(global){
var mmirName = typeof MMIR_CORE_NAME === "string"? MMIR_CORE_NAME : "mmir";
var mmir = global? global[mmirName] : void(0);
var require = mmir && mmir.require? mmir.require : (typeof requirejs !== "undefined"? requirejs : (global? global.require : require));
var require = mmir && mmir.require? mmir.require : require;
require("mmirf/storageUtils").restoreObject({ classConstructor: "mmirf/view",name:"registration",def:"\r\n@contentFor(\"content\"){\r\n\r\n<div id=\"registration-form\" class=\"app_content\">\r\n\t\r\n\t<div id=\"emailField\" class=\"ui-field-contain\">\r\n   \t\t<label for=\"email\">\r\n   \t\t\t@localize(\"user_name_place_holder\")\r\n   \t\t</label>\r\n   \t\t<input type=\"text\" name=\"email\" id=\"email\" value=\"\">\r\n\t</div>\r\n\t\r\n\t<div id=\"passwordField\" class=\"ui-field-contain\">\r\n   \t\t<label for=\"password\">\r\n   \t\t\t@localize(\"password_place_holder\")\r\n   \t\t</label>\r\n   \t\t<input type=\"password\" name=\"password\" id=\"password\" value=\"\">\r\n\t</div>\r\n\t\r\n\t<button id=\"loginButton\" name=\"register_btn\" data-inline=\"true\">\r\n  \t\t\t@localize(\"registration_label\")\r\n\t</button>\r\n</div>\r\n\r\n}@\r\n\r\n@contentFor(\"header\"){\r\n   <h1>\r\n   \t\t@localize(\"registration_label\")\r\n   </h1>\r\n}@\r\n\r\n                   ",contentFors:[require("mmirf/storageUtils").restoreObject({ classConstructor: "mmirf/contentElement",name:"content",definition:"\r\n\r\n<div id=\"registration-form\" class=\"app_content\">\r\n\t\r\n\t<div id=\"emailField\" class=\"ui-field-contain\">\r\n   \t\t<label for=\"email\">\r\n   \t\t\t@localize(\"user_name_place_holder\")\r\n   \t\t</label>\r\n   \t\t<input type=\"text\" name=\"email\" id=\"email\" value=\"\">\r\n\t</div>\r\n\t\r\n\t<div id=\"passwordField\" class=\"ui-field-contain\">\r\n   \t\t<label for=\"password\">\r\n   \t\t\t@localize(\"password_place_holder\")\r\n   \t\t</label>\r\n   \t\t<input type=\"password\" name=\"password\" id=\"password\" value=\"\">\r\n\t</div>\r\n\t\r\n\t<button id=\"loginButton\" name=\"register_btn\" data-inline=\"true\">\r\n  \t\t\t@localize(\"registration_label\")\r\n\t</button>\r\n</div>\r\n\r\n",start:2,end:634,internalHasDynamicContent:true,allContentElements:[require("mmirf/storageUtils").restoreObject({ classConstructor: "mmirf/parsingResult",name:"\"user_name_place_holder\"",nameType:"StringLiteral",start:138,end:173,type:4 }),require("mmirf/storageUtils").restoreObject({ classConstructor: "mmirf/parsingResult",name:"\"password_place_holder\"",nameType:"StringLiteral",start:348,end:382,type:4 }),require("mmirf/storageUtils").restoreObject({ classConstructor: "mmirf/parsingResult",name:"\"registration_label\"",nameType:"StringLiteral",start:552,end:583,type:4 })],initEvalFunctions: function initEvalFunctions(){this.setRenderData = function(__$$DATA$$__){};
var exportRenderDataTo = function(__$$DATA$$__){};
this.exportRenderDataTo = exportRenderDataTo;
},initView: function(){ var viewName = "registration"; var ctrlName = "Application"; this.view = require("mmirf/presentationManager").getView(ctrlName, viewName); this.getView = function(){return this.view;}; return this.view; },getView: function(){ return this.initView();},initRenderer: function(){ this.renderer = require("mmirf/renderUtils"); },init: function(){ this.initRenderer();  this.initEvalFunctions();  } }),require("mmirf/storageUtils").restoreObject({ classConstructor: "mmirf/contentElement",name:"header",definition:"\r\n   <h1>\r\n   \t\t@localize(\"registration_label\")\r\n   </h1>\r\n",start:638,end:721,internalHasDynamicContent:true,allContentElements:[require("mmirf/storageUtils").restoreObject({ classConstructor: "mmirf/parsingResult",name:"\"registration_label\"",nameType:"StringLiteral",start:16,end:47,type:4 })],initEvalFunctions: function initEvalFunctions(){this.setRenderData = function(__$$DATA$$__){};
var exportRenderDataTo = function(__$$DATA$$__){};
this.exportRenderDataTo = exportRenderDataTo;
},initView: function(){ var viewName = "registration"; var ctrlName = "Application"; this.view = require("mmirf/presentationManager").getView(ctrlName, viewName); this.getView = function(){return this.view;}; return this.view; },getView: function(){ return this.initView();},initRenderer: function(){ this.renderer = require("mmirf/renderUtils"); },init: function(){ this.initRenderer();  this.initEvalFunctions();  } })],initPublish: function(){ require("mmirf/presentationManager").addView(this.getController(), this); },initController: function(){ var ctrlName = "Application"; this.controller = require("mmirf/controllerManager").get(ctrlName); },init: function(){ this.initController();  } }, true, 3);
})(typeof window !== "undefined"? window : global);