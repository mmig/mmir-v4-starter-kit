
{InitNodeJsEnv|s}
{InitTemplateParserNodeJsEnv|s}


//"export" base-dir path for saving generated/compiled template files:
var compiledViewGenPath = '{jsGenDirBase|s|url}';

var buildLibDirRelativePath = theLibPath;

var requiren  = require;
var requirejs = requirejs || require(buildLibDirRelativePath+'r.js');
var require   = requirejs;
var definejs  = require.define;
var mmir;

{!r.js|s!}

{NodeJsFileHandler|s}

{ChecksumHandler|s}

//set the framework's src-path from the build-properties file
//  (may be different than the default value in mainConfig.js)
var appSrcDir = '{jsSrcDirBase|s|url}';
require.config({
	baseUrl: './' + appSrcDir,
	paths: {'core': 'core'}
});

require(['core'], function(core){

//export core module to "global" mmir variable:
mmir = core;

////define "auto-start" module for starting the template processing
//// (gets triggered after main-config for requirejs is was applied)
//definejs('doStartTemplateProc', ['require'], function(req){
//	//now: do start processing the eHTML template files
//	doStartTemplateProcessing(req);
//});
//core.startModule = 'doStartTemplateProc';

//disable tracing in logger-module: (current library stacktrace.js does not support nodejs / TODO repl. with https://www.npmjs.com/package/stack-trace in nodejs env)
core.logTrace = false;

//set up dummy implementation for LanguageManager:
core.LanguageManager = {};
core.LanguageManager.getInstance = function dummyLangMang (){ return core.LanguageManager; };
core.LanguageManager.getText = function dummyGetText (id) {return 'dummy-text-'+id;};
core.LanguageManager.getLanguage = function dummyGetLang () {return 'NA';};
					
doLoadAppConfig(require.define);
});

//apply main-config for requirejs 
// (need to pass in requirejs' define as argument "define")
function doLoadAppConfig(define){

	require.config({_buildConfig|s});
	
	require(['core', 'logger'], function(core){
//		require([core.startModule]);
		doStartTemplateProcessing();
	});

}

function doStartTemplateProcessing(){

definejs('jsonlint', function(){

{!-- ... and an AMD module for the jsonlint parser ... !}
{jsonlint_parser|s}

	return jsl.parser;
});
		
var checksumUtils;
var jsl;

var jqueryDeferred = jqueryDeferred || requiren(jqueryDeferredModuleUri);

require(['constants', 'checksumUtils', 'md5'], function(constants, checksumUtils, md5impl){

	checksumUtils.init(md5impl);
	
	constants.init(theBasePath);
	
	require(['jsonlint', 'jqueryajax', 'configurationManager'], function(jsonlint, jquery, configurationManager){

		jsl = {
			parser: require('jsonlint')
		};
		
		jqueryDeferred.extend(jquery, jqueryDeferred);


		//export public MMIR modules to "global" mmir variable:
		mmir.Constants = constants;
		mmir.ConfigurationManager = configurationManager;

		require(['ES3Lexer', 'ES3Parser', 'contentLexer', 'contentParser', 'scriptLexer', 'scriptParser', 'templateLexer',
					'commonUtils', 'controllerManager', 'presentationManager'], function(){
		
{StandaloneTemplateParserExec|s}

		});
	});
});

}//END: doStartTemplateProcessing(){...
