
{InitNodeJsEnv|s}
{InitTemplateParserNodeJsEnv|s}


//"export" base-dir path for saving generated/compiled template files:
var compiledViewGenPath = '{jsGenDirBase|s|url}';

var buildLibDirRelativePath = theLibPath;

var requiren  = require;
var requirejs = requirejs || require(buildLibDirRelativePath+'r.js');
var require   = requirejs;
var definejs  = require.define;
var mmir;

{!r.js|s!}

{NodeJsFileHandler|s}

{ChecksumHandler|s}

//set the framework's src-path from the build-properties file
//  (may be different than the default value in mainConfig.js)
var appSrcDir = '{jsSrcDirBase|s|url}';
var reqInstance = require.config({
	baseUrl: './' + appSrcDir.replace(/mmirf\/$/, '/')
});

require(['mmirf/core'], function(core){

	//export core module to "global" mmir variable:
	mmir = core;
	
	//set dummy renderer/viewEngine
	core.viewEngine = 'mmirf/build/viewEngine';
	
	//set up dummy implementation for LanguageManager:
	core.lang = {};
	core.lang.getText = function dummyGetText (id) {return 'dummy-text-'+id;};
	core.lang.getLanguage = function dummyGetLang () {return 'NA';};
	
	core.require = reqInstance;
	//core._define = define;
	
	doLoadAppConfig(require.define);
});

//apply main-config for requirejs 
// (need to pass in requirejs' define as argument "define")
function doLoadAppConfig(define){

	require.config({_buildConfig|s});
	
	require(['mmirf/core', 'mmirf/logger'], function(core){
		doStartTemplateProcessing();
	});

}

function doStartTemplateProcessing(){

definejs('jsonlint', function(){

{!-- ... and an AMD module for the jsonlint parser ... !}
{jsonlint_parser|s}

	return jsl.parser;
});
		
var checksumUtils;
var jsl;

var jqueryDeferred = jqueryDeferred || requiren(jqueryDeferredModuleUri);

require(['mmirf/constants', 'mmirf/checksumUtils', 'mmirf/md5'], function(constants, checksumUtils, md5impl){

	checksumUtils.init(md5impl);
	
	constants.init(theBasePath);
	
	require(['jsonlint', 'mmirf/build/jqueryajax', 'mmirf/configurationManager'], function(jsonlint, jquery, configurationManager){

		jsl = {
			parser: require('jsonlint')
		};
		
		jqueryDeferred.extend(jquery, jqueryDeferred);


		//export public MMIR modules to "global" mmir variable:
		mmir.const = constants;
		mmir.conf = configurationManager;

		require(['mmirf/ES3Lexer', 'mmirf/ES3Parser', 'mmirf/contentLexer', 'mmirf/contentParser', 'mmirf/scriptLexer', 'mmirf/scriptParser', 'mmirf/templateLexer',
					'mmirf/commonUtils', 'mmirf/controllerManager', 'mmirf/presentationManager'], function(){
		
{StandaloneTemplateParserExec|s}

		});
	});
});

}//END: doStartTemplateProcessing(){...
