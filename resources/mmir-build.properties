##
## The default build properties for ANT build.xml
##
## NOTE: in most cases, these properties do not need to be changed

SCXMLInputEngineXMLFile=inputDescriptionSCXML.xml
SCXMLDialogEngineXMLFile=dialogDescriptionSCXML.xml

SCXMLInputEngineOutfile=InputDescription.js
SCXMLDialogEngineOutfile=DialogDescription.js

# names for temporary files (used when compiling SemanticInterpreter code)
tempCompileGrammarParserGeneratorJSFile=completeGrammarParserGenerator.js
tempCompileGrammarParserGeneratorJSExecFile=completeGrammarParserGeneratorExec.js

tempCompileTemplateParserGeneratorJSExecFile=completeTemplateParserExec.js

buildDir=build/
buildDirBin=${buildDir}bin/
buildDirLib=${buildDir}lib/
buildSCXMLJSDir=${buildDirLib}commons-scxml-js/
buildSCXMLJSDirLib=${buildSCXMLJSDir}lib/java/

# Output folder for temporary JavaScript files
buildDirTempJS=${buildDirBin}tempJS/

pathRhinoJar=${buildDirLib}js.jar

#################################################
##
## Framework and Android / Phonegap (cordova) specific settings
##

# specific settings for usage with Android and Phonegap/Cordova
# (used when creating a file-list)
# -> the base directory from where to start scanning for files
## alt. example: for <exec-dir>/<root sources>:
##baseDir=src/
baseDir=./

# path to the additional (external) libraries required by the build script:
# this value is used within the build-script
execBuildLibDir=./../../lib/

# name for the root directory of the app (i.e. location of index.html),
# relative to the baseDir 
appRootDirName=www

# root directory for the web app
appRootDir=${baseDir}${appRootDirName}/

# base directory for JavaScript source files
jsSrcDirBase=${appRootDir}mmirf/

# base directory for generated JavaScript application (i.e. none-framework) files
jsGenDirBase=${appRootDir}gen/

# base directory for JavaScript build files (i.e. files used in build processes)
jsBuildDirBase=${buildDirLib}mmir-build/

# ANT code-templates that are used for creating generator scripts (for generating grammars, and views)
antScriptGrammarsTemplate=${jsBuildDirBase}spec/generate-grammars.xml
antScriptViewsTemplate=${jsBuildDirBase}spec/generate-views.xml

# paths to SCXML files
SCXMLDialogEngineDir=${appRootDir}config/statedef/
SCXMLInputEngineDir=${appRootDir}config/statedef/
JSOutDialogEngineDir=${jsGenDirBase}scxml/
JSOutInputEngineDir=${jsGenDirBase}scxml/

# path for generated/pre-compiled template-files
outDirCompiledTemplate=${jsGenDirBase}views/

# for creation of file list (i.e. list of all model, view, and controller classes/files),
# relative to the appRootDir
## alt. example: if target dirs are in different sub-dirs (note: these would need to be set in mmir.Constants (mmirf/tools/constants.js) accordingly!)
##directoriesToParse=main/controllers,gui/views,data/models,cfg/config,vendor/mmirf/plugins,main/helpers,generated/grammar,generated/gui/views
directoriesToParse=controllers,views,models,config,mmirf/plugins,helpers,gen/grammar,gen/views
# path to directory and file, where the file list will be stored
outputDirectoryParseFileJson=${appRootDir}config/directories.json

# for creation of compiled SemanticInterpreter (grammatic parser)
grammarDefinitionJsonDir=${appRootDir}config/languages/
grammarDefinitionJsonFile=grammar.json
# the grammar engine (i.e. compiler-compiler engine that is used for generating the executable grammar)
#  one of: jscc, jison, pegjs
grammarEngine=jscc
# this language-code is only used as a dummy "default" (you should use AllLanguages target variants where possible)
grammarLanguageCode=de
outDirCompiledGrammar=${jsGenDirBase}grammar/
outFileCompiledGrammar=grammar.js
