<?xml version="1.0"?>
	<!-- generated file: do not change -->
	<project name="Mobile DialogSystem - Create Generator Script for compiled Grammars" default="createBaseParserScriptFileAnt">
		<property name="isAntTargetStr" value="true" />
		<target name="createBaseParserScriptFileAnt" depends="createTempCompileDir,-check-need-create-base-grammar-gen-file" if="${is.create.base.grammar.gen.file}">
			<echo message="Building base script file ${base.js.compile.grammar.parser.generator} for compiling GrammarParser..." />
		    <mkdir dir="${buildDir}" />
		    <mkdir dir="${buildDirBin}" />
			<concat destfile="${base.js.compile.grammar.parser.generator}" fixlastline="true" outputencoding="UTF-8">
			<string>





//export require as requirejs:
var requirejs = require;

//set the framework's src-path from the build-properties file
//  (may be different than the default value in mainConfig.js)
var appSrcDir = '${jsSrcDirBase}';
require.config({
	baseUrl: './' + appSrcDir,
	paths: {'core': 'core'}
});

require(['core'], function(core){

	//define "auto-start" module for starting the template processing
	// (gets triggered after main-config for requirejs is was applied)
	definejs('doStartBuildProc', function(){
		//now: do start the build process:
		doStartBuildEnv();
	});
	core.startModule = 'doStartBuildProc';
	
	//disable tracing in logger-module: (current library stacktrace.js does not support nodejs / TODO repl. with https://www.npmjs.com/package/stack-trace in nodejs env)
	core.logTrace = false;
	
	//configure replacement / build-stub implementations:
	var buildLibDir = '${buildDirLib}mmir-build/';
	
	//...determine correct build/ sub-dir by analysing the main-app's dir:
	var appDirParts = appSrcDir.split('/');
	for(var i=0, size=appDirParts.length; i+1 != size; ++i){
		if(appDirParts[i] !== '.'){
			buildLibDir = '../' + buildLibDir;
		}
	}
	
	//set the paths for the build-implementations:
	var buildPaths = {
		  'jquery': buildLibDir+'jqueryDummy'
		, 'jqueryajax': buildLibDir+'jqueryAjaxDummy'
		, 'env': buildLibDir+'envDetectBuild'
		, 'jqm': buildLibDir+'jqueryMobileDummy'
	};
	
	if(!${isAntTargetStr}){
		//remove PEG.js / Jison depenencies
		//  (need to be initialized separately, since requirejs.shim does not work in nodejs; see below)
		buildPaths.pegjs = void(0);
		buildPaths.jison = void(0);
	}
	
	
	core.config({
		baseUrl: './' + appSrcDir,
		paths: buildPaths
	});
	
	//load main-config for requirejs
	// (also triggers the auto-start module)
	doLoadAppConfig(require.define);
});

//apply main-config for requirejs 
// (need to pass in requirejs' define as argument "define")
function doLoadAppConfig(define){

</string>
<fileset dir="${jsSrcDirBase}" includes="mainConfig.js" />
<string>

}


//setup and init PEG.js
(function(){
	
</string>
<fileset dir="${jsSrcDirBase}vendor/libs" includes="peg-0.9.0.js" />
<string>

	definejs('pegjs',  function(){ return PEG; });
						
})();

//setup and init Jison
var _bnf;
(function(){
	
</string>
<fileset dir="${jsSrcDirBase}vendor/libs" includes="jison.js" />
<string>
	
	_bnf = bnf;
	definejs('jison',  function(){ return Jison; });
						
})();

//encapsule build-process (gets triggered after build-paths are configured; see above)
function doStartBuildEnv(){

	//build AMD module for CryptoJS/md5 library:
	definejs('md5impl', function(){
	
</string>
<fileset dir="${jsSrcDirBase}vendor/libs" includes="md5.js" />
<string>

		return CryptoJS;
	});
	
	definejs('jsonlint', function(){


</string>
<fileset dir="${buildDirLib}" includes="jsonlint.parser.js" />
<string>

		return jsl.parser;
	});
					
	var checksumUtils;	    		
	var jsl;
	
	// * load dependencies (SemanticInterpreter, jQuery) 
	// * setup JSON parser (for creating detailed error messages)
	// * initialize checksum-utils (with loaded dependencies)
	require(['constants', 'jqueryajax'], function(constants){

		//fix base-dir location (since we do not execute from the main web-directory)
		constants.init('${baseDir}www/');

		require(['pegjs', 'jison', 'semanticInterpreter', 'jquery', 'jsonlint', 'md5impl','checksumUtils','configurationManager'], function(){
			
			
			var bnf = _bnf;
			var Jison = require('jison');
			
			jsl = {
				parser: require('jsonlint')
			};
			
			//load deferred-impl. via node's require function:
			var jqueryDeferred = jqueryDeferred || requiren(jqueryDeferredModuleUri);
			
			//attach deferred-impl. to jquery:
			jqueryDeferred.extend(require('jquery'), jqueryDeferred);
			
			checksumUtils = require('checksumUtils');
			checksumUtils.init( require('md5impl') );
			
			//start the standalone-grammar parser / generator: 
			
</string>
<fileset dir="${jsBuildDirBase}ant" includes="StandaloneSemanticParserCompileExec.js" />
<string>

		});
	});
	
}//END: doStartBuild(){..

	    </string>
	    </concat>
		<echo message="${base.js.compile.grammar.parser.generator} built." />
	</target>
</project>
