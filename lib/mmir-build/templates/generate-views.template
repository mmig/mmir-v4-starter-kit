
{InitNodeJsEnv|s}
{InitTemplateParserNodeJsEnv|s}


//"export" base-dir path for saving generated/compiled template files:
var compiledViewGenPath = '{jsGenDirBase|s|url}';

var buildLibDirRelativePath = theLibPath;

var requiren  = require;
var requirejs = requirejs || require(buildLibDirRelativePath+'r.js');
var require   = requirejs;
var definejs  = require.define;
var mmir;

{!r.js|s!}

{NodeJsFileHandler|s}


//set the framework's src-path from the build-properties file
//  (may be different than the default value in mainConfig.js)
var appSrcDir = '{jsSrcDirBase|s|url}';
require.config({
baseUrl: './' + appSrcDir,
paths: {'core': 'core'}
});

require(['core'], function(core){

//export core module to "global" mmir variable:
mmir = core;

//define "auto-start" module for starting the template processing
// (gets triggered after main-config for requirejs is was applied)
definejs('doStartTemplateProc', function(){
	//now: do start processing the eHTML template files
	doStartTemplateProcessing();
});
core.startModule = 'doStartTemplateProc';

//disable tracing in logger-module: (current library stacktrace.js does not support nodejs / TODO repl. with https://www.npmjs.com/package/stack-trace in nodejs env)
core.logTrace = false;

//configure replacement / build-stub implementations:
var buildLibDir = '{buildDirLib|s|url}mmir-build/';

//...determine correct build/ sub-dir by analysing the main-app's dir:
var appDirParts = appSrcDir.split('/');
for(var i=0, size=appDirParts.length; i+1 != size; ++i){
	if(appDirParts[i] !== '.'){
		buildLibDir = '../' + buildLibDir;
	}
}

//set the paths for the build-implementations:
core.config({
	baseUrl: './' + appSrcDir,
	paths: {
		  'jquery': buildLibDir+'jqueryDummy'
		, 'jqueryajax': buildLibDir+'jqueryAjaxDummy'
		, 'env': buildLibDir+'envDetectBuild'
		, 'jqm': buildLibDir+'jqueryMobileDummy'
		
		//disable jQueryMobile plugin SimpleModal (not needed in nodejs-environment)
		, 'jqmSimpleModal': void(0)
		
		//disable loadCss module (not needed in nodejs-environment)
		, 'loadCss': void(0)
		
		//parsingResult has a hidden dependency on org.antrl
		// (need custom module-definition -> see below)
		, 'parsingResult': void(0)
		
		//"remove" configs for ANTRL parsers:
		//  these need to be initilized separately -> see below definejs(..)
		//  ...since requirejs' shim does not work in nodejs
		, 'antlr3': void(0)
		, 'ES3Lexer': void(0)
		, 'ES3Parser': void(0)
		, 'contentLexer': void(0)
		, 'contentParser': void(0)
		, 'scriptLexer': void(0)
		, 'scriptParser': void(0)
		, 'templateLexer': void(0)
		//, 'templateParser': void(0)
	}
});

//define dummy loadCss module:
definejs('loadCss', function(){
	//no-op
	return function(){};
});
//define dummy jqmSimpleModal module:
definejs('jqmSimpleModal', ['jqueryajax'] , function(jquery){
	return jquery;
});

//set up dummy implementation for LanguageManager:
core.LanguageManager = {};
core.LanguageManager.getInstance = function dummyLangMang (){ return core.LanguageManager; };
core.LanguageManager.getText = function dummyGetText (id) {return 'dummy-text-'+id;};
core.LanguageManager.getLanguage = function dummyGetLang () {return 'NA';};
					
doLoadAppConfig(require.define);
});

//apply main-config for requirejs 
// (need to pass in requirejs' define as argument "define")
function doLoadAppConfig(define){

{mainConfig|s}

}

function doStartTemplateProcessing(){
definejs('antlr3', function(){
		
		org = {};
		window.org = org;
		if (typeof org.antlr === "undefined" || !org.antlr) {
			org.antlr = {};
		}
		if (typeof org.antlr.runtime == "undefined" || !org.antlr.runtime) {
			org.antlr.runtime = {};
		}
		if (typeof org.antlr.runtime.tree == "undefined" || !org.antlr.runtime.tree) {
			org.antlr.runtime.tree = {};
		}
		
{antlr3_all|s}

	return org;
});


require(['antlr3'], function(org){

	//re-route the define-call from parsingResult.js
	// in order to "add" its hidden dependency on org.antlr:
	var define = function(){
		var size = arguments.length + 1;
		var args = new Array(size);
		
		//insert module name:
		args[0] = 'parsingResult';
		
		//... and copy arguments from original call
		for(var i=1; i != size; ++i){
			args[i]=arguments[i-1];
		}
		
		return definejs.apply(window, args);
	};
	
	
{!MmirTemplateParser.js|s!}
{ES3Lexer|s}
{ES3Parser|s}
{MmirES3Walker|s}
{MmirScriptContentLexer|s}
{MmirScriptContentParser|s}
{MmirScriptLexer|s}
{MmirScriptParser|s}
{MmirTemplateLexer|s}
{!MmirTemplateParser.js!}

	definejs('ES3Lexer',  function(){ return ES3Lexer; });
	definejs('ES3Parser', function(){ return ES3Parser; });
	
	definejs('contentLexer',  function(){ return MmirScriptContentLexer; });
	definejs('contentParser', function(){ return MmirScriptContentParser; });
	
	definejs('scriptLexer',  function(){ return MmirScriptLexer; });
	definejs('scriptParser', function(){ return MmirScriptParser; });
	
	definejs('templateLexer',  function(){ return MmirTemplateLexer; });
	//definejs('templateParser', function(){ return MmirTemplateParser; });
						
});


require(['antlr3'], function(org){

	//re-route the define-call from parsingResult.js
	// in order to "add" its hidden dependency on org.antlr:
	var define = function(){
		var size = arguments.length + 1;
		var args = new Array(size);
		
		//insert module name:
		args[0] = 'parsingResult';
		
		//... and copy arguments from original call
		for(var i=1; i != size; ++i){
			args[i]=arguments[i-1];
		}
		
		return definejs.apply(window, args);
	};


{parsingResult|s}


});//END of custom define-definition for parsingResult


{!-- build AMD module for CryptoJS/md5 library:  !}

definejs('md5impl', function(){

{md5|s}

	return CryptoJS;
});

definejs('jsonlint', function(){

{!-- ... and an AMD module for the jsonlint parser ... !}
{jsonlint_parser|s}

	return jsl.parser;
});
		
var checksumUtils;
var jsl;

var jqueryDeferred = jqueryDeferred || requiren(jqueryDeferredModuleUri);

require(['constants', 'checksumUtils', 'md5impl'], function(constants, checksumUtils, md5impl){

	checksumUtils.init(md5impl);
	
	constants.init(theBasePath);
	
	require(['jsonlint', 'jqueryajax', 'configurationManager'], function(jsonlint, jquery, configurationManager){

		jsl = {
			parser: require('jsonlint')
		};
		
		jqueryDeferred.extend(jquery, jqueryDeferred);


		//export public MMIR modules to "global" mmir variable:
		mmir.Constants = constants;
		mmir.ConfigurationManager = configurationManager;

		require(['ES3Lexer', 'ES3Parser', 'contentLexer', 'contentParser', 'scriptLexer', 'scriptParser', 'templateLexer',
					'commonUtils', 'controllerManager', 'presentationManager'], function(){
		
{StandaloneTemplateParserExec|s}

		});
	});
});

}//END: doStartTemplateProcessing(){...
