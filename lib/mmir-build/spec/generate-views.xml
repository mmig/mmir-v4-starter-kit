<?xml version="1.0"?>
	<!-- generated file: do not change -->
	<project name="Mobile DialogSystem - Create Generator Script for eHTML" default="createTemplateParserFileAnt">
		<property name="isAntTargetStr" value="true" />
		<target name="createTemplateParserFileAnt" depends="cleanTemplateFiles,generateFileListJSONFile,createTempCompileDir">
	    <echo message="Building script file &quot;${exec.js.compile.template.parser}&quot; for parsing templates (.ehtml)..." />
	    <mkdir dir="${buildDir}" />
	    <mkdir dir="${buildDirBin}" />
	    <concat destfile="${exec.js.compile.template.parser}" fixlastline="true" overwrite="true">
		<string>

</string>
<fileset dir="${jsBuildDirBase}rhino" includes="InitRhinoEnv.js" />

<fileset dir="${jsBuildDirBase}rhino" includes="InitTemplateParserRhinoEnv.js" />
<string>


//"export" base-dir path for saving generated/compiled template files:
var compiledViewGenPath = '${jsGenDirBase}';

var buildLibDirRelativePath = theLibPath;

var requiren  = require;
var requirejs = requirejs || require(buildLibDirRelativePath+'r.js');
var require   = requirejs;
var definejs  = require.define;
var mmir;



</string>
<fileset dir="${jsBuildDirBase}rhino" includes="RhinoFileHandler.js" />

<fileset dir="${jsBuildDirBase}common" includes="ChecksumHandler.js" />
<string>

//set the framework's src-path from the build-properties file
//  (may be different than the default value in mainConfig.js)
var appSrcDir = '${jsSrcDirBase}';
var reqInstance = require.config({
	baseUrl: './' + appSrcDir,
	paths: {'core': 'core'}
});

require(['core'], function(core){

//export core module to "global" mmir variable:
mmir = core;

////define "auto-start" module for starting the template processing
//// (gets triggered after main-config for requirejs is was applied)
//definejs('doStartTemplateProc', ['require'], function(req){
//	//now: do start processing the eHTML template files
//	doStartTemplateProcessing(req);
//});
//core.startModule = 'doStartTemplateProc';

//disable tracing in logger-module: (current library stacktrace.js does not support nodejs / TODO repl. with https://www.npmjs.com/package/stack-trace in nodejs env)
core.logTrace = false;

//set up dummy implementation for LanguageManager:
core.LanguageManager = {};
core.LanguageManager.getInstance = function dummyLangMang (){ return core.LanguageManager; };
core.LanguageManager.getText = function dummyGetText (id) {return 'dummy-text-'+id;};
core.LanguageManager.getLanguage = function dummyGetLang () {return 'NA';};

core.require = reqInstance;
//core._define = define;

doLoadAppConfig(require.define);
});

//apply main-config for requirejs 
// (need to pass in requirejs' define as argument "define")
function doLoadAppConfig(define){

	require.config({"baseUrl":"./www/mmirf/","config":{"inputManager":{"scxmlDoc":"config/statedef/inputDescriptionSCXML.xml","mode":"extended"},"dialogManager":{"scxmlDoc":"config/statedef/dialogDescriptionSCXML.xml","mode":"extended"},"logger":{"trace":false}},"paths":{"core":"core","main":"main","jquery":"../../build/lib/mmir-build/jqueryDummy","scion":"vendor/libs/scion-amd","constants":"tools/constants","commonUtils":"tools/commonUtils","stringExtension":"tools/extensions/StringExtensions","dictionary":"tools/dictionary","paramsParseFunc":"tools/paramsParseFunc","env":"../../build/lib/mmir-build/envDetectBuild","envInit":"tools/envInit","inputManager":"manager/dialog/inputManager","dialogManager":"manager/dialog/dialogManager","engineConfig":"manager/dialog/engineConfig","scionEngine":"manager/dialog/scion/scionEngine","scionUtil":"manager/dialog/scion/scionUtil","controllerManager":"manager/controllerManager","controller":"mvc/controllers/controller","helper":"mvc/controllers/helper","modelManager":"manager/modelManager","presentationManager":"manager/presentationManager","jqmViewEngine":"env/view/jqmViewEngine","jqm":"../../build/lib/mmir-build/jqueryMobileDummy","jqmSimpleModal":"../../build/lib/mmir-build/jqmSimpleModalDummy","waitDialog":"tools/stdlne-wait-dlg","antlr3":"../../build/lib/mmir-build/mod/antlr3-all_amd","configurationManager":"manager/settings/configurationManager","languageManager":"manager/settings/languageManager","mediaManager":"manager/mediaManager","notificationManager":"manager/notificationManager","viewConstants":"mvc/views/viewConstants","layout":"mvc/views/layout","view":"mvc/views/view","partial":"mvc/views/partial","contentElement":"mvc/views/contentElement","yield":"mvc/views/yield","renderUtils":"mvc/parser/templateRenderUtils","parserModule":"mvc/parser/parserModule","storageUtils":"mvc/parser/storageUtils","parseUtils":"mvc/parser/templateParseUtils","ES3Lexer":"../../build/lib/mmir-build/mod/ES3Lexer_amd","ES3Parser":"../../build/lib/mmir-build/mod/ES3Parser_amd","scriptLexer":"../../build/lib/mmir-build/mod/MmirScriptLexer_amd","scriptParser":"../../build/lib/mmir-build/mod/MmirScriptParser_amd","contentLexer":"../../build/lib/mmir-build/mod/MmirScriptContentLexer_amd","contentParser":"../../build/lib/mmir-build/mod/MmirScriptContentParser_amd","templateLexer":"../../build/lib/mmir-build/mod/MmirTemplateLexer_amd","templateParser":"../../build/lib/mmir-build/mod/MmirTemplateParser_amd","templateProcessor":"mvc/parser/templateProcessor","parsingResult":"mvc/parser/parsingResult","grammarConverter":"semantic/grammarConverter","semanticInterpreter":"semantic/semanticInterpreter","asyncGrammar":"semantic/asyncGrammar","stemmer":"semantic/stemmer","jscc":"vendor/libs/jscc-amd","jison":"vendor/libs/jison","pegjs":"../../build/lib/mmir-build/mod/peg-0.9.0_amd","asyncGen":"env/grammar/asyncGenerator","jsccGen":"env/grammar/jsccGenerator","jsccAsyncGen":"env/grammar/jsccAsyncGenerator","jisonGen":"env/grammar/jisonGenerator","jisonAsyncGen":"env/grammar/jisonAsyncGenerator","pegjsGen":"env/grammar/pegjsGenerator","pegjsAsyncGen":"env/grammar/pegjsAsyncGenerator","md5":"../../build/lib/mmir-build/mod/md5_amd","checksumUtils":"tools/checksumUtils","loadCss":"../../build/lib/mmir-build/loadCssDummy","jsonUtils":"tools/extensions/JsonUtils","commonUtilsCompatibility":"tools/extensions/CommonUtilsCompatibility","languageManagerCompatibility":"tools/extensions/LanguageManagerCompatibility","loggerEnabled":"tools/logger","loggerDisabled":"tools/loggerDisabled","stacktrace":"../../build/lib/mmir-build/stacktraceDummy","jqueryajax":"../../build/lib/mmir-build/jqueryAjaxDummy","logger":"tools/logger"}});
	
	require(['core', 'logger'], function(core){
//		require([core.startModule]);
		doStartTemplateProcessing();
	});

}

function doStartTemplateProcessing(){

definejs('jsonlint', function(){


</string>
<fileset dir="${buildDirLib}" includes="jsonlint.parser.js" />
<string>

	return jsl.parser;
});
		
var checksumUtils;
var jsl;

var jqueryDeferred = jqueryDeferred || requiren(jqueryDeferredModuleUri);

require(['constants', 'checksumUtils', 'md5'], function(constants, checksumUtils, md5impl){

	checksumUtils.init(md5impl);
	
	constants.init(theBasePath);
	
	require(['jsonlint', 'jqueryajax', 'configurationManager'], function(jsonlint, jquery, configurationManager){

		jsl = {
			parser: require('jsonlint')
		};
		
		jqueryDeferred.extend(jquery, jqueryDeferred);


		//export public MMIR modules to "global" mmir variable:
		mmir.Constants = constants;
		mmir.ConfigurationManager = configurationManager;

		require(['ES3Lexer', 'ES3Parser', 'contentLexer', 'contentParser', 'scriptLexer', 'scriptParser', 'templateLexer',
					'commonUtils', 'controllerManager', 'presentationManager'], function(){
		
</string>
<fileset dir="${jsBuildDirBase}common" includes="StandaloneTemplateParserExec.js" />
<string>

		});
	});
});

}//END: doStartTemplateProcessing(){...

		    </string>
		    </concat>
		    <echo message="&quot;${exec.js.compile.template.parser}&quot; built." />
		</target>
</project>
